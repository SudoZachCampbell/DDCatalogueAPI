// <auto-generated />
using System;
using DDCatalogue.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDCatalogue.Migrations
{
    [DbContext(typeof(DDContext))]
    [Migration("20200509123112_Initial Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Creature", b =>
                {
                    b.Property<int>("CreatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ac")
                        .HasColumnType("int");

                    b.Property<bool?>("Acrobatics")
                        .HasColumnType("bit");

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<bool?>("AnimalHandling")
                        .HasColumnType("bit");

                    b.Property<bool?>("Arcana")
                        .HasColumnType("bit");

                    b.Property<bool?>("Athletics")
                        .HasColumnType("bit");

                    b.Property<int?>("Cha")
                        .HasColumnType("int");

                    b.Property<int?>("Con")
                        .HasColumnType("int");

                    b.Property<bool?>("Deception")
                        .HasColumnType("bit");

                    b.Property<int?>("Dex")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("History")
                        .HasColumnType("bit");

                    b.Property<string>("HitDice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<bool?>("Insight")
                        .HasColumnType("bit");

                    b.Property<int?>("Int")
                        .HasColumnType("int");

                    b.Property<bool?>("Intimidation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Investigations")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Medicine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Nature")
                        .HasColumnType("bit");

                    b.Property<bool?>("Perception")
                        .HasColumnType("bit");

                    b.Property<bool?>("Performance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Persuasion")
                        .HasColumnType("bit");

                    b.Property<string>("Reactions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Religion")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavCha")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavCon")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavDex")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavInt")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavStr")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavWis")
                        .HasColumnType("bit");

                    b.Property<bool?>("SleightOfHand")
                        .HasColumnType("bit");

                    b.Property<string>("Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Stealth")
                        .HasColumnType("bit");

                    b.Property<int?>("Str")
                        .HasColumnType("int");

                    b.Property<bool?>("Survival")
                        .HasColumnType("bit");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Wis")
                        .HasColumnType("int");

                    b.HasKey("CreatureId");

                    b.ToTable("Creature");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Creature");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.Property<int>("NpcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CreatureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NpcId");

                    b.HasIndex("CreatureId");

                    b.ToTable("Npcs");

                    b.HasData(
                        new
                        {
                            NpcId = 1,
                            CreatureId = 1,
                            Name = "Engrad Longbones"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PlayerId");

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BuildingId");

                    b.HasIndex("LocaleId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Continent", b =>
                {
                    b.Property<int>("ContinentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContinentId");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.Property<int>("DungeonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<int?>("MunicipalityLocaleId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DungeonId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("MunicipalityLocaleId");

                    b.ToTable("Dungeons");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.Property<int>("LocaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("LocaleId");

                    b.HasIndex("RegionId");

                    b.ToTable("Locales");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContinentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RegionId");

                    b.HasIndex("ContinentId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Character", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Faction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<int?>("NpcId")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("NpcId");

                    b.HasIndex("PlayerId");

                    b.HasDiscriminator().HasValue("Character");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Monster", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<string>("Actions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuildingId")
                        .HasColumnName("Monster_BuildingId")
                        .HasColumnType("int");

                    b.Property<double>("Challenge")
                        .HasColumnType("float");

                    b.Property<int>("DefeatXp")
                        .HasColumnType("int");

                    b.Property<string>("LegendaryActions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocaleId")
                        .HasColumnName("Monster_LocaleId")
                        .HasColumnType("int");

                    b.Property<int>("Pp")
                        .HasColumnType("int");

                    b.Property<string>("Senses")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasDiscriminator().HasValue("Monster");

                    b.HasData(
                        new
                        {
                            CreatureId = 1,
                            Ac = 16,
                            Alignment = 0,
                            Cha = 10,
                            Con = 14,
                            Dex = 11,
                            Hp = 39,
                            Int = 10,
                            Languages = "Common, Dwarvish",
                            Name = "Drawf Warrior",
                            Speed = "25ft",
                            Str = 14,
                            Wis = 11,
                            Challenge = 1.0,
                            DefeatXp = 200,
                            Pp = 10,
                            Senses = "Darkvision 60ft"
                        },
                        new
                        {
                            CreatureId = 2,
                            Ac = 16,
                            Alignment = 8,
                            Cha = 9,
                            Con = 13,
                            Dex = 14,
                            Hp = 27,
                            Int = 8,
                            Languages = "Common, Goblin",
                            Name = "Bugbear",
                            Speed = "30ft",
                            Str = 15,
                            Wis = 11,
                            Challenge = 1.0,
                            DefeatXp = 200,
                            Pp = 10,
                            Senses = "Darkvision 60ft"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Armour", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Armour");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Treasure", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Treasure");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Weapon", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Npcs")
                        .HasForeignKey("CreatureId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Buildings")
                        .HasForeignKey("LocaleId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Municipality")
                        .WithMany()
                        .HasForeignKey("MunicipalityLocaleId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Region", "Region")
                        .WithMany("Municipalities")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Continent", "Continent")
                        .WithMany("Regions")
                        .HasForeignKey("ContinentId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Character", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Characters")
                        .HasForeignKey("BuildingId");

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Characters")
                        .HasForeignKey("LocaleId");

                    b.HasOne("DDCatalogue.Model.Creatures.Npc", "Npc")
                        .WithMany()
                        .HasForeignKey("NpcId");

                    b.HasOne("DDCatalogue.Model.Creatures.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Monster", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany()
                        .HasForeignKey("LocaleId");
                });
#pragma warning restore 612, 618
        }
    }
}
