// <auto-generated />
using System;
using DDCatalogue.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DDCatalogue.Migrations
{
    [DbContext(typeof(DDContext))]
    [Migration("20200514132144_Change seed test")]
    partial class Changeseedtest
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Creature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Ac")
                        .HasColumnType("int");

                    b.Property<bool?>("Acrobatics")
                        .HasColumnType("bit");

                    b.Property<int>("Alignment")
                        .HasColumnType("int");

                    b.Property<bool?>("AnimalHandling")
                        .HasColumnType("bit");

                    b.Property<bool?>("Arcana")
                        .HasColumnType("bit");

                    b.Property<bool?>("Athletics")
                        .HasColumnType("bit");

                    b.Property<int?>("Cha")
                        .HasColumnType("int");

                    b.Property<int?>("Con")
                        .HasColumnType("int");

                    b.Property<bool?>("Deception")
                        .HasColumnType("bit");

                    b.Property<int?>("Dex")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("History")
                        .HasColumnType("bit");

                    b.Property<string>("HitDice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Hp")
                        .HasColumnType("int");

                    b.Property<bool?>("Insight")
                        .HasColumnType("bit");

                    b.Property<int?>("Int")
                        .HasColumnType("int");

                    b.Property<bool?>("Intimidation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Investigations")
                        .HasColumnType("bit");

                    b.Property<string>("Languages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Medicine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Nature")
                        .HasColumnType("bit");

                    b.Property<bool?>("Perception")
                        .HasColumnType("bit");

                    b.Property<bool?>("Performance")
                        .HasColumnType("bit");

                    b.Property<bool?>("Persuasion")
                        .HasColumnType("bit");

                    b.Property<string>("Reactions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Religion")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavCha")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavCon")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavDex")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavInt")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavStr")
                        .HasColumnType("bit");

                    b.Property<bool?>("SavWis")
                        .HasColumnType("bit");

                    b.Property<bool?>("SleightOfHand")
                        .HasColumnType("bit");

                    b.Property<string>("Speed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Stealth")
                        .HasColumnType("bit");

                    b.Property<int?>("Str")
                        .HasColumnType("int");

                    b.Property<bool?>("Survival")
                        .HasColumnType("bit");

                    b.Property<string>("Traits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Wis")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Creature");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Creature");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<int?>("MonsterId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasIndex("MonsterId");

                    b.ToTable("Npcs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocaleId = 9,
                            MonsterId = 2,
                            Name = "Klarg Big-Crown"
                        },
                        new
                        {
                            Id = 2,
                            LocaleId = 3,
                            MonsterId = 1,
                            Name = "Gundren Rockseeker"
                        },
                        new
                        {
                            Id = 3,
                            BuildingId = 9,
                            LocaleId = 6,
                            MonsterId = 3,
                            Name = "Sildar Hallwinter"
                        },
                        new
                        {
                            Id = 4,
                            BuildingId = 2,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Elmar Barthen"
                        },
                        new
                        {
                            Id = 5,
                            BuildingId = 4,
                            LocaleId = 6,
                            MonsterId = 3,
                            Name = "Linene Graywind"
                        },
                        new
                        {
                            Id = 6,
                            LocaleId = 9,
                            MonsterId = 4,
                            Name = "Yeemik Largebrain"
                        },
                        new
                        {
                            Id = 7,
                            BuildingId = 10,
                            LocaleId = 6,
                            Name = "Iarno Albrek"
                        },
                        new
                        {
                            Id = 8,
                            LocaleId = 6,
                            MonsterId = 1,
                            Name = "Tharden Rockseeker"
                        },
                        new
                        {
                            Id = 9,
                            LocaleId = 6,
                            MonsterId = 1,
                            Name = "Nundro Rockseeker"
                        },
                        new
                        {
                            Id = 10,
                            BuildingId = 1,
                            LocaleId = 6,
                            MonsterId = 7,
                            Name = "Toblen Stonehill"
                        },
                        new
                        {
                            Id = 11,
                            BuildingId = 3,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Daran Edermath"
                        },
                        new
                        {
                            Id = 12,
                            BuildingId = 5,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Halia Thornton"
                        },
                        new
                        {
                            Id = 13,
                            BuildingId = 6,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Qelline Alderleaf"
                        },
                        new
                        {
                            Id = 14,
                            BuildingId = 7,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Sister Garaele"
                        },
                        new
                        {
                            Id = 15,
                            BuildingId = 9,
                            LocaleId = 6,
                            MonsterId = 5,
                            Name = "Harbin Wester"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Items");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Item");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterBuilding", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.HasKey("MonsterId", "BuildingId");

                    b.HasIndex("BuildingId");

                    b.ToTable("MonsterBuilding");
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterLocale", b =>
                {
                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("LocaleId")
                        .HasColumnType("int");

                    b.HasKey("MonsterId", "LocaleId");

                    b.HasIndex("LocaleId");

                    b.ToTable("MonsterLocale");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocaleId");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LocaleId = 6,
                            Name = "Stonehill Inn"
                        },
                        new
                        {
                            Id = 2,
                            LocaleId = 6,
                            Name = "Barthen's Provisions"
                        },
                        new
                        {
                            Id = 3,
                            LocaleId = 6,
                            Name = "Edermath Orchard"
                        },
                        new
                        {
                            Id = 4,
                            LocaleId = 6,
                            Name = "Lionshield Coster"
                        },
                        new
                        {
                            Id = 5,
                            LocaleId = 6,
                            Name = "Phandalin Miner's Exchange"
                        },
                        new
                        {
                            Id = 6,
                            LocaleId = 6,
                            Name = "Alderleaf Farm"
                        },
                        new
                        {
                            Id = 7,
                            LocaleId = 6,
                            Name = "Shrine of Luck"
                        },
                        new
                        {
                            Id = 8,
                            LocaleId = 6,
                            Name = "The Sleeping Giant"
                        },
                        new
                        {
                            Id = 9,
                            LocaleId = 6,
                            Name = "Townmaster's Hall"
                        },
                        new
                        {
                            Id = 10,
                            LocaleId = 6,
                            Name = "Tresendar Manor"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.ToTable("Dungeons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cragmaw Hideout"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Locales");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Neverwinter"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Thundertree"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Cragmaw Castle"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Conyberry"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Old Owl Well"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Phandalin"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Leilon"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Neverwinter"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Cragmaw Hideout"
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ContinentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Map")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Monster", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<string>("Actions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Challenge")
                        .HasColumnType("float");

                    b.Property<int>("DefeatXp")
                        .HasColumnType("int");

                    b.Property<string>("LegendaryActions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Pp")
                        .HasColumnType("int");

                    b.Property<string>("Senses")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Monster");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Ac = 16,
                            Alignment = 0,
                            Cha = 10,
                            Con = 14,
                            Dex = 11,
                            Hp = 39,
                            Int = 10,
                            Languages = "Common, Dwarvish",
                            Name = "Drawf Warrior",
                            Speed = "25ft",
                            Str = 14,
                            Wis = 11,
                            Challenge = 1.0,
                            DefeatXp = 200,
                            Pp = 10,
                            Senses = "Darkvision 60ft"
                        },
                        new
                        {
                            Id = 2,
                            Ac = 16,
                            Alignment = 8,
                            Cha = 9,
                            Con = 13,
                            Dex = 14,
                            Hp = 27,
                            Int = 8,
                            Languages = "Common, Goblin",
                            Name = "Bugbear",
                            Speed = "30ft",
                            Str = 15,
                            Wis = 11,
                            Challenge = 1.0,
                            DefeatXp = 200,
                            Pp = 10,
                            Senses = "Darkvision 60ft"
                        },
                        new
                        {
                            Id = 3,
                            Ac = 18,
                            Alignment = 9,
                            Cha = 15,
                            Con = 14,
                            Dex = 11,
                            Hp = 52,
                            Int = 11,
                            Languages = "Any one",
                            Name = "Knight",
                            Speed = "30ft",
                            Str = 16,
                            Wis = 11,
                            Challenge = 3.0,
                            DefeatXp = 700,
                            Pp = 10
                        },
                        new
                        {
                            Id = 4,
                            Ac = 15,
                            Alignment = 5,
                            Cha = 8,
                            Con = 10,
                            Dex = 14,
                            Hp = 7,
                            Int = 10,
                            Languages = "Common, Goblin",
                            Name = "Goblin",
                            Speed = "30ft",
                            Str = 8,
                            Wis = 8,
                            Challenge = 0.25,
                            DefeatXp = 50,
                            Pp = 9
                        },
                        new
                        {
                            Id = 5,
                            Ac = 10,
                            Alignment = 9,
                            Cha = 10,
                            Con = 10,
                            Dex = 10,
                            Hp = 4,
                            Int = 10,
                            Languages = "Any one",
                            Name = "Commoner",
                            Speed = "30ft",
                            Str = 10,
                            Wis = 10,
                            Challenge = 0.0,
                            DefeatXp = 10,
                            Pp = 10
                        },
                        new
                        {
                            Id = 6,
                            Ac = 13,
                            Alignment = 10,
                            Cha = 6,
                            Con = 12,
                            Dex = 15,
                            Hp = 11,
                            Int = 3,
                            Languages = "",
                            Name = "Wolf",
                            Speed = "40ft",
                            Str = 12,
                            Wis = 12,
                            Challenge = 0.25,
                            DefeatXp = 50,
                            Pp = 13
                        },
                        new
                        {
                            Id = 7,
                            Ac = 14,
                            Alignment = 0,
                            Cha = 10,
                            Con = 12,
                            Dex = 10,
                            Hp = 26,
                            Int = 10,
                            Languages = "Common, Dwarvish",
                            Name = "Dwarf",
                            Speed = "25ft",
                            Str = 13,
                            Wis = 12,
                            Challenge = 0.5,
                            DefeatXp = 100,
                            Pp = 10
                        });
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Player", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Creatures.Creature");

                    b.Property<string>("Background")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("Faction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LocaleId")
                        .HasColumnType("int");

                    b.Property<string>("PlayerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocaleId");

                    b.HasDiscriminator().HasValue("Player");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Armour", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Armour");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Treasure", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Treasure");
                });

            modelBuilder.Entity("DDCatalogue.Model.Items.Weapon", b =>
                {
                    b.HasBaseType("DDCatalogue.Model.Items.Item");

                    b.HasDiscriminator().HasValue("Weapon");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Npc", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Npcs")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Npcs")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Npcs")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterBuilding", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Monsters")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Buildings")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDCatalogue.Model.Joins.MonsterLocale", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Monsters")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DDCatalogue.Model.Creatures.Monster", "Monster")
                        .WithMany("Locales")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Building", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Locale", null)
                        .WithMany("Buildings")
                        .HasForeignKey("LocaleId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Dungeon", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId");

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Dungeons")
                        .HasForeignKey("LocaleId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Locale", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Region", "Region")
                        .WithMany("Locales")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Locations.Region", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Continent", "Continent")
                        .WithMany("Regions")
                        .HasForeignKey("ContinentId");
                });

            modelBuilder.Entity("DDCatalogue.Model.Creatures.Player", b =>
                {
                    b.HasOne("DDCatalogue.Model.Locations.Building", "Building")
                        .WithMany("Players")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DDCatalogue.Model.Locations.Locale", "Locale")
                        .WithMany("Players")
                        .HasForeignKey("LocaleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
